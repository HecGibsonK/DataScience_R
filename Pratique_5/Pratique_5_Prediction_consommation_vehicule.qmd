---
title: "Pratique_5_Prediction_consommation_vehicule"
author: "HHGK"
format: html
editor: visual
---

# Prediction de la consommation des vehicules

## Activation des packages statistiques nécessaires:

##### ggplot2; readxl; dplyr;  psych; cars; car

```{r}
#| echo: false
library(ggplot2)    # Visualisation des données
library(readxl)     # Bibliothèque de manipulation de données dans Excel
library(dplyr)      # Bibliothèque de manipulation de données statistiques
library(psych)     # Bibliothèque de statistiques descriptives

options(digits = 3) # Combien de décimales afficher
```

## Collection des donnees

```{r}
#| echo: false
# Ecrire du code
data("mtcars")

Mydata <- mtcars[,]
```

## Analyse des donnees

### Voir les types de donnees de "Clients"

```{r}
#| echo: false
sapply(mtcars, class)
```

### Voir la structure de la base de données (format plus allonge)

```{r}
#| echo: false
# glimpse(mtcars)
```

###  voir la structure de la base de données (format plus court)

```{r}
#| echo: false
str(mtcars)
```

### Verification des variables quantitatives par boucle "For"

```{r}
#| echo: false
for (variable in names(mtcars)) {
  if (is.numeric(mtcars[[variable]])){
    print(paste0(variable," est un numerique"))
  }else {
    print(paste0(variable," n'est pas numerique"))
  }
}
```

## Resume descriptif de la base de donnee

```{r}
#| echo: false
summary(mtcars)
#mtcars[,1]
```

### Distribution de la consomation des vehicules

#### La consormation moyenne des vehicaules est autour de 20

```{r}
#| echo: false
library(ggplot2)
ggplot(data = mtcars, aes(x="Consommation des vehicule", y=mpg))+ 
  geom_boxplot(color="black", fill="blue")
```

## Choix des variables pertinentes

```{r}
#| echo: false
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
```

#### Convertion des variables non quantitatives en facteur

```{r}
#| echo: false
for (variable in names(mtcars)) {
  if (is.numeric(mtcars[[variable]])){
    variable = mtcars[[variable]];
  }else {
    variable = as.factor(mtcars[[variable]])
  }
}
```

#### Une new base de donnee sans "vs" et "am"

```{r}
#| echo: false
New_base <- mtcars[,-which(names(mtcars) %in% c("vs","am"))]
str(New_base)
```

```{r}
#| echo: false
# plot(mtcars)
plot(New_base)
```

## Matrice de correlation entre les variables quantitatives

```{r}
#| echo: false
# cor(mtcars)

```

#### Ou via "corPlot"

```{r}
#| echo: false
corPlot(New_base)
```

Ou via le script suivant

```{r}
#| echo: false
# Install and load reshape2 package
#install.packages("reshape2")
library(reshape2)
 
# creating correlation matrix
corr_mat <- round(cor(New_base),2)
 
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
head(melted_corr_mat)
 
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, 
                                   fill=value)) + 
geom_tile() +
geom_text(aes(Var2, Var1, label = value), 
          color = "black", size = 2)
```

Les variables fortement négativement reliées à la consomation sont cyl, disp, hp et carb.

```{r}
table(mtcars$vs)
```

## Analyse de la liaison entre mpg et am (qualitative deux modalités)

### Test paramétrique:

```{r}
ggplot(data = mtcars, aes(x=am,y=mpg))+
  geom_boxplot(aes(fill=mpg))
```

### Test paramétrique de student

```{r}
# Réalisation d'un t-test pour comparer les moyennes de 'mpg' entre les voitures à transmission manuelle et automatique
t.test(mpg ~ am, data=mtcars)
```

#### Vérification des hypothèses

```{r}
# Création d'un QQ-plot pour la variable 'mpg'
qqnorm(mtcars$mpg)
qqline(mtcars$mpg, col = "red")
```

```{r}
# Test de Shapiro-Wilk pour 'mpg'
shapiro.test(mtcars$mpg)
```

```{r}
install.packages("cars")
# Chargement du package
library(car)

# Réalisation du test de Levene sur 'mpg' en fonction du type de transmission 'am'
leveneTest(mpg ~ am, data=mtcars)
```

```{r}
t.test(mpg ~ am, data=mtcars, var.equal = FALSE)
```

```{r}
wilcox.test(mpg ~ am, data=mtcars)
```

# Construction du modèle de régression linéaire

```{r}
model <- lm(mpg ~ ., data = mtcars )
```

```{r}
summary(model)
```

```{r}
residualPlot(model)
```

```{r}
vif(model)
```

```{r}
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, 
                                   fill=value)) + 
geom_tile() +
geom_text(aes(Var2, Var1, label = value), 
          color = "black", size = 2)
```

```{r}
mtcars_bis <- mtcars[,-which(names(mtcars) %in% c("cyl","disp"," hp","carb","qsec"))]

model_bis <- lm(mpg ~ ., data = mtcars_bis )
```

```{r}
summary(model_bis)
```

```{r}
vif(model_bis)
```

Prédiction

```{r}
predict(model_bis, data.frame(hp = 10, drat = 5, wt = 10, vs = as.factor(0), am = as.factor(0), gear = 7))
```

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
