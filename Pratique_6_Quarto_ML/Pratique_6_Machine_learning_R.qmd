---
title: "Pratique_6_Machine_learning_R"
author: "Dr Hector Gibson Kinmanhon HOUANKPO (PhD)"
format: html
editor: visual
---

```{r}
#| echo: false
library(randomForest) # Bibliothèque de foret aleatoire
library(ggplot2)    # Visualisation des données
library(readxl)     # Bibliothèque de manipulation de données dans Excel
library(dplyr)      # Bibliothèque de manipulation de données statistiques
library(psych)     # Bibliothèque de statistiques descriptives
library(car)      # Bibliothèque de modèle de régression
library(caret)    # Bibliothèque pour Machine learning
library(pROC)     # Bibliothèque pour l'évaluation des modèles 
```

# [**Régression logistique en R**]{.underline}

```{r}
#| echo: false
Data = read.table(file.choose(), sep=",", header = T)
```

```{r}
#| echo: false
# Duplication de la base de donnees
Mydata <- Data
```

### [**Voir les types de donnees de "Clients"**]{.underline}

```{r}
#| echo: false
sapply(Mydata, class)
```

### [**La structure de la base de donnees**]{.underline}

```{r}
#| echo: false
str(Mydata)
```

# [**Preprocessing**]{.underline}

## [**Resume descriptif de la base de donnee**]{.underline}

```{r}
#| echo: false
summary(Mydata)
colSums(is.na(Mydata))
```

### Suppression [**des lignes contenent des valeurs manquantes (recommander)**]{.underline}

```{r}
#| echo: false
Mydata_new <- na.omit(Mydata) 
```

### [**Imputation des valeurs manquantes par le moyenne(Pas recommander)**]{.underline}

```{r}
#| echo: false
#Mydata_new = Mydata 
#Mydata_new$Age[is.na(Mydata_new$Age)] <- mean(Mydata_new$Age, na.rm = T)
```

#### [**Conversion de certaines variable en "Factor"**]{.underline}

```{r}
#| echo: false
Mydata_new$Survived <- as.factor(Mydata_new$Survived)
Mydata_new$Sex <- as.factor(Mydata_new$Sex)
Mydata_new$Pclass <- as.factor(Mydata_new$Pclass)
str(Mydata_new)
```

# [**Diviser la base de données deux**]{.underline}

-   La base d'apprentissage 70% de la base totale

-   La base test: 30%

### [**Choix des variables pertinantes**]{.underline}

```{r}
#| echo: false
names(Mydata_new)
```

```{r}
#| echo: false
Mydata_New <- subset(Mydata_new, select = c(Survived,Pclass,Sex,Age,SibSp,Parch,Fare)) # Sélectionner et/ou supprimer des colonnes d'une table

#Mydata_New <- within(Mydata, rm(PassengerId, Name, Ticket, Cabin,Embarked))  # supprimer des colonnes d'une table 

#Mydata_New <- Mydata_new[, c(2,3,5,6,7,8,10)]

names(Mydata_New)
```

#### [**La repartition de la base de donnees**]{.underline}

```{r}
##| echo: false
set.seed(123)# Assurer la reproductibilité de votre base de donnee
index <- createDataPartition(Mydata_New$Survived, p=0.7, list=F)
```

```{r}
# Autre option de repartition de la base de donnees
#index1 <- sample(1:nrow(Mydata_New), 0.7*nrow(Mydata_New))
#head(index1)

###################################################################

ind <- sample(2, nrow(Mydata_New), replace = TRUE, prob = c(0.7, 0.3))

#Mydata_train <- Mydata_New[ind==1,]
#Mydata_test <- Mydata_New[ind==2,]
```

```{r}
#| echo: false
Mydata_train <- Mydata_New[index, ]
Mydata_test <- Mydata_New[-index,]

names(Mydata_train)
```

# [**Regression logistique**]{.underline}

```{r}
unique(Mydata_New$Parch)
```

```{r}
model_logistique <- glm(Survived ~ ., family = binomial, data = Mydata_train)

model_logistique2 <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, family = binomial, data = Mydata_train)
```

```{r}
# Stocker le modèle
saveRDS(model_logistique, "E:/WORLD/PERSO/Programmation/GitHub/DataScience_R/Pratique_7_Shiny/model_logistique_final.rds")
```

### [**Verification des residus**]{.underline}

```{r}
summary(model_logistique)
```

```{r}
anova(model_logistique, test = "Chisq")
```

```{r}
# Significativité globale du modèle  ??????
 G2 = model_logistique$null.deviance-model_logistique$deviance
 
  1-pchisq(G2,df=1)
```

# [**Prédiction sur la base de donnee "train"**]{.underline}

#### [**Calcul des scores de prediction (Probabilites) sur les donnees d'entrainement**]{.underline}

```{r}
# Calcul des scores de prediction (Probabilites)
prediction_train <- predict(model_logistique, type = "response")
head(prediction_train)
```

#### [**Evaluation des modèles par courbe ROC (Train)**]{.underline}

```{r}
# Package pour l'évaluation des modèles
#library(pROC)
Roc_train <- roc(response = Mydata_train$Survived, predictor = prediction_train)
Roc_train

plot(Roc_train, main="Courbe ROC")
```

```{r}
AUC_train <- auc(Roc_train)
AUC_train
```

# [**Prédiction sur la base de donnee "Test"**]{.underline}

#### [**Calcul des scores de prediction (Probabilites) sur les donnees test**]{.underline}

```{r}
prediction_test <- predict(model_logistique, newdata = Mydata_test[,-1], type = "response")
head(prediction_test)
```

```{r}
pred <- ifelse(prediction_test > 0.5, "Survie", "Non survie")
#paste(pred, "avec une probabilite de", prediction_test)
```

```{r}
#?????????????????????????????????????????
#predict(prediction_test, data.frame(Pclass = as.factor(1), Age = 25, SibSp = 2, Parch = 2, Fare = 500))
  
```

#### [**Evaluation des modèles par courbe ROC(Test)**]{.underline}

```{r}
Roc_test <- roc(response = Mydata_test$Survived, predictor = prediction_test)
Roc_test

plot(Roc_test, main="Courbe ROC")
```

```{r}
AUC_test <- auc(Roc_test)
AUC_test
```

# Forêts aléatoires

```{r}
#install.packages("randomForest")
#library(randomForest)
model_rf <- randomForest(Survived ~ ., data=Mydata_train, importance=TRUE,
                        ntree=500)
model_rf
```

```{r}
# Stocker le modèle
saveRDS(model_rf, "E:/WORLD/PERSO/Programmation/GitHub/DataScience_R/Pratique_7_Shiny/model_randomforest.rds")
```

#### [**Importance des variables**]{.underline}

```{r}
# Importance des variables
varImp(model_rf)
```

```{r}
varImpPlot(model_rf)
```

```{r}
plot(model_rf)
```

# [**Prédiction sur la base de donnee "Train"**]{.underline}

```{r}
prediction_rf_train <-  predict(model_rf, type = "prob")

#prediction_rf_train <-  predict(model_rf, type = "response")

head(prediction_rf_train)
```

```{r}
#Vérifier le type des variables de Mydata_train et prediction_rf_train
str(Mydata_train$Survived)
str(prediction_rf_train)
```

```{r}
#Mydata_train$Survived <- as.numeric(as.character(Mydata_train$Survived))
#prediction_rf_train <- as.numeric(as.character(prediction_rf_train))
```

```{r}
roc_rf_train <- roc(Mydata_train$Survived, prediction_rf_train[,1], levels=c("0", "1"))

plot(roc_rf_train, main="Courbe ROC")
```

```{r}
AUC_rf_train <- auc(roc_rf_train)
AUC_rf_train
```

# [**Prédiction sur la base de donnee "Test"**]{.underline}

```{r}
prediction_rf_test <- predict(model_rf, newdata = Mydata_test[,-1], type = "prob")

#prediction_rf_test <- predict(model_rf, newdata = Mydata_test[,-1], type = "response")

head(prediction_rf_test)
```

```{r}
#Vérifier le type des variables de Mydata_train et prediction_rf_train
str(Mydata_test$Survived)
str(prediction_rf_test)
```

```{r}
#Mydata_test$Survived <- as.numeric(as.character(Mydata_test$Survived))
#prediction_rf_test <- as.numeric(as.character(prediction_rf_test))
```

```{r}
roc_rf_test <- roc(Mydata_test$Survived, prediction_rf_test[,2], levels=c("0", "1"))

plot(roc_rf_test, main="Courbe ROC")
```

```{r}
AUC_rf_test <- auc(roc_rf_test)
AUC_rf_test
```

## [Optimisation des paramètres de la forêt aléatoire]{.underline}

-   Définition des paramètres de validation croisée "trainControl"

-   Grid de paramètres à tester "expand.grid"

-   Entraînement du modèle avec validation croisée et recherche des meilleurs hyperparamètres "train"

```{r}
# Définition des paramètres de validation croisée
control <- trainControl(method="cv", number=5, search="grid") 
              # number = 5 <- nombre d'iteration

# Grid de paramètres à tester
tunegrid <- expand.grid(.mtry=c(1:6))

# Entraînement du modèle avec validation croisée et recherche des meilleurs hyperparamètres
rf_model <- train(Survived ~ ., data=Mydata_train, method="rf", trControl=control, tuneGrid=tunegrid, ntree=500)
```

```{r}
# Importance des variables
plot(rf_model)
importance <- varImp(rf_model, scale=FALSE)
print(importance)
```

### [**Meilleurs paramètres trouvés**]{.underline}

```{r}
# Meilleurs paramètres trouvés
print(rf_model$bestTune)
```

### [**Entraînement direct avec randomForest pour accès à l'erreur OOB (Pas necessaire)**]{.underline}

```{r}
# Entraînement direct avec randomForest pour accès à l'erreur OOB
rf_model_direct <- randomForest(Survived ~ ., data=Mydata_train, mtry=rf_model$bestTune$mtry, ntree=500)


plot(rf_model_direct) 
```

### [**Prédiction sur l'ensemble de test**]{.underline}

```{r}
# Prédiction sur l'ensemble de test
predictions <- predict(rf_model, newdata=Mydata_test)
head(predictions)
```

```{r}
prob_predictions <- predict(rf_model, newdata=Mydata_test, type="raw")
head(prob_predictions)
```

```{r}
#Vérifier le type des variables de Mydata_train et prediction_rf_train
str(Mydata_test$Survived)
str(predictions)
```

```{r}
#Mydata_train$Survived <- as.numeric(as.character(Mydata_train$Survived))
predictions <- as.numeric(as.character(predictions))
prob_predictions <- as.numeric(as.character(prob_predictions))
```

### [**Calcul de l'AUC et tracé de la courbe ROC**]{.underline}

```{r}
# Calcul de l'AUC et tracé de la courbe ROC
roc_MD <- roc(Mydata_test$Survived, predictions)

plot(roc_MD, main="Courbe ROC")
```

```{r}
AUC_MD <- auc(roc_MD)
AUC_MD
```

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
