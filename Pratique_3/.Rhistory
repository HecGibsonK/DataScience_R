getwd()  # Identifier son répertoire de travail
setwd("E:\\WORLD\\PERSO\\Programmation\\GitHub\\DataScience_R\\Pratique_3") # Changer son répertoire de travail
library(ggplot2)    # Visualisation des données
library(readxl)     # Bibliothèque de manipulation de données dans Excel
library(dplyr)      # Bibliothèque de manipulation de données statistiques
library(psych)     # Bibliothèque de statistiques descriptives
options(digits = 3) # Combien de décimales afficher
############
# Importaion du fichier client (csv)
Clients = read.table(file.choose(), sep=";", header = T)
# Importaion du fichier client (xlsx)
Clients1 = read_excel(file.choose())
############
# Imporation de la base Ventes (csv)
Ventes = read.table(file.choose(), sep=";", header = T)
# Importaion du fichier Ventes (xlsx)
Ventes1 = read_excel(file.choose(), sheet=1, col_names = TRUE)
# Joindre les deux tables
jointure <- left_join(Ventes, Clients, by = "CustomerID")
jointure1 <- inner_join(Ventes, Clients, by = "CustomerID")
jointure2 <- merge(Ventes, Clients, by ="CustomerID") ## Faire joindre les 2 tableaux en ordre croissant
colnames(Clients)
colnames(jointure)
# Somme du chiffre d'affaire par type client
summarise(group_by(jointure,CustomerCategory), nb =n())
jointure %>%
group_by(CustomerCategory) %>%
summarise(somme = sum(MontantTotal, na.rm = T), moyenne = mean(MontantTotal, na.rm = T), nombre = n())
#===============================================================================
# Créer la colonne montantTotal
Ventes$MontantTotal <- Ventes$Quantity * Ventes$Price
# Joindre les deux tables
jointure <- left_join(Ventes, Clients, by = "CustomerID")
jointure1 <- inner_join(Ventes, Clients, by = "CustomerID")
jointure2 <- merge(Ventes, Clients, by ="CustomerID") ## Faire joindre les 2 tableaux en ordre croissant
colnames(jointure)
jointure %>%
group_by(CustomerCategory) %>%
summarise(somme = sum(MontantTotal, na.rm = T), moyenne = mean(MontantTotal, na.rm = T), nombre = n())
#===============================================================================
# Relation entre la quantité et le prix
plot(x=jointure$Quantity, y = jointure$Price, xlab = "Quantité", ylab = "Prix", main = "Quantite en fonction du prix", type ="l", col ="blue")
#===============================================================================
# Relation entre la quantité et le prix
plot(x=jointure$Quantity, y = jointure$Price, xlab = "Quantité", ylab = "Prix", main = "Quantite en fonction du prix", type ="l", col ="blue")
ggplot(data = jointure, aes(x = Quantity, y = Price, fill = CustomerCategory)) +
geom_point( size = 3)+
scale_color_manual(values = c("blue","red","green","grey"))+
facet_wrap(~CustomerCategory)
ggplot(data = jointure, aes(x = Quantity, y = Price)) +
geom_point(col = "red", size = 3)+
xlab(label = "Quantite")+
ylab(label ="Prix")+
ggtitle("Quantité en fonction du prix")
# Histogramme avec une fonction native
hist(jointure$Price)
ggplot(data = jointure, aes(Price))+
geom_histogram(bins = 40, color = "blue", aes(fill=CustomerCategory))+
facet_grid(vars(CustomerCategory))
# Boxplot avec les fonctions natives
boxplot(Price ~ CustomerCategory, data = jointure)
?boxplot
list_variable <- c("Price", "Quantite")
for (i  in list_variable) {
}
# Boxplot avec les fonctions natives
boxplot(Price ~ CustomerCategory, data = jointure)
list_variable <- c("Price", "Quantite")
for (i  in list_variable) {
}
# Couleurs par catégorie
ggplot(data = jointure, aes(x=CustomerCategory, y=Price))+
geom_boxplot(aes(fill = CustomerCategory))
ggplot(data = jointure, aes(x=CustomerCategory, y=Price))+
geom_violin(aes(fill = CustomerCategory))#+
# Couleurs par catégorie changer les couleurs manuellement
ggplot(data = jointure, aes(x=CustomerCategory, y=Price))+
geom_violin(aes(fill = CustomerCategory))+
scale_fill_manual(values = c("blue", "red", "green", "grey"))
# Couleurs par catégorie changer les couleurs manuellement
ggplot(data = jointure, aes(x=CustomerCategory, y=Price))+
geom_boxplot(aes(fill = CustomerCategory))+
scale_fill_manual(values = c("blue", "red", "green", "grey"))
jointure$AgeGroup <- as.factor(jointure$AgeGroup)
barplot(table(jointure$AgeGroup))
ggplot(data = jointure, aes(AgeGroup))+
geom_bar()
ggplot(data = jointure, aes(AgeGroup))+
geom_col()
library(lubridate)
jointure$datebis <- dmy_hm(jointure$Date)
jointure$datebis2 <- as.Date(jointure$datebis)
str(jointure)
# obtenir le mois
mois <- month(jointure$datebis2)
mois
jour <- day(jointure$datebis2)
jour
annee <- year(jointure$datebis2)
# Utiliser des chaîne de caractère en R
library(stringr)
?lubridate
ma_chaine <- "Bienvenue sur LeCoinStat"
ma_chaine
str_c("Letter: ", letters)
fruit <- c("apple", "banana", "pear", "pineapple")
str_like(fruit, "app")
str_like(fruit, "app%")
str_like(fruit, "ba_ana")
str_like(fruit, "%APPLE")
