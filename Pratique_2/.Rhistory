set.seed(1)
sample_df <- data.frame(
group = factor(rep(letters[1:3], each = 10)),
value = rnorm(30)
)
View(sample_df)
group_means_df <- setNames(
aggregate(value ~ group, sample_df, mean),
c("group", "group_mean")
)
View(sample_df)
View(group_means_df)
View(group_means_df)
Animal <- "Requin"
Animal
Age <- 32
Animal <- "Megalodon"
Animal
Age <- 33
##### Exercice 4 : Graphiques de base  //  Création d'un graphique
# Utilisez la fonction plot() pour créer un graphique simple. Le graphique doit représenter les points (1,1), (2,4), (3,9) et (4,16).
plot(x = c(1,2,3,4, -2, 6,0), y=c(1,4,9,16,-2,6,1))
# Chargement du package
library(ggplot2)
ggplot(data = sample_df, mapping = aes(x = group, y = value)) +
geom_point() +
geom_point(
mapping = aes(y = group_mean), data = group_means_df,
colour = 'red', size = 3
)
Bal <- c(100,55, 68, 96, 87, 30, 88)
Bal
# lire le premier élement Read
Bal[1]
# Deuxième élément
Bal[2]
# taille d'un vecteur
length(Bal)
# Dernier élément du vecteur
Bal[length(Bal)]
# Mettre à jour le vecteur
Bal[6] <- 51
Bal
BalNew <- Bal[-c(1,2,3)]
BalNew
Bal <- Bal[-1]
Bal
length(Bal)
BalNew <- Bal[-c(1,2,3)]
BalNew
Bal
Bal <- c(100,55, 68, 96, 87, 30, 88)
BalNew <- Bal[-c(1,2,3)]
BalNew
# ajouter une nouvelle notes
Bal <- c(Bal, 99)
Bal
# Nom des matières
nom_matiere <- c("C++", "C#", "R", "Python", "Algèbre", "Analyse","Algèbre", "Analyse")
# Type des noms de matière
str(nom_matiere)
nom_matiere_facteur <- factor(nom_matiere)
nom_matiere_facteur
levels(nom_matiere_facteur)
# Création des listes: Create
liste_etudiants <- list(
Nom = "Warys",
Age = 24,
Note = Bal
)
View(liste_etudiants)
# Type de données
str(liste_etudiants)
liste_etudiants <- list(
Nom = "Gibi",
Age = 24,
Note = Bal
)
# Type de données
str(liste_etudiants)
liste_etudiants <- list(
Nom = "Gibi",
Age = 24,
Bals = Bal
)
# Type de données
str(liste_etudiants)
# Lire les éléments de la liste
liste_etudiants$Nom
liste_etudiants$Age
liste_etudiants$Bals
liste_etudiants <- list(
Nom = "Gibi",
Age = 32,
Bals = Bal
)
# Type de données
str(liste_etudiants)
# Lire les éléments de la liste
liste_etudiants$Nom
liste_etudiants$Age
liste_etudiants$Bals
# liste de liste
liste_2 <- list(Nom = "Gibi", Age = 32, Bals = Bal)
# liste de liste
liste_2 <- list(
Nom = "Gibi",
Age = 32,
Bals = Bal
)
liste_3 <- list(
temp = liste_etudiants,
tempbis = liste_2
)
liste_3$liste_1
liste_3 <- list(liste_etudiants, liste_2)
liste_3
liste_3[["temp"]]
liste_2$Age
liste_3$liste_1
# liste de liste
liste_3 <- list(
temp = liste_etudiants,
tempbis = liste_2
)
liste_3$tempbis
# Créer des matrice Create
test <-1:9
matrice_1 <- matrix(test, byncol = T)
?matrix
matrice_1 <- matrix(test, nrow = 3, ncol = 3, bycol = T)
matrice_1 <- matrix(test, nrow = 3, ncol = 3, bycol = TRUE)
matrice_1 <- matrix(test, nrow = 3, ncol = 3, bycol = FALSE)
matrice_1 <- matrix(test, nrow = 3, ncol = 3, byrow = FALSE)
matrice_1
matrice_1 <- matrix(test, nrow = 3, ncol = 3, byrow = T)
matrice_1
matrice_2 <- matrix(test, nrow = 3, ncol = 3, byrow = F)
matrice_2
# Créer des matrice Create
test <-1:9
#La matrice est remplie par des colonnes sinon la matrice est remplie par des lignes
matrice_1 <- matrix(test, nrow = 3, ncol = 3, byrow = F)
matrice_1
#La matrice est remplie par des lignes
matrice_2 <- matrix(test, nrow = 3, ncol = 3, byrow = T)
matrice_2
test <-1:15
#La matrice est remplie par des colonnes sinon la matrice est remplie par des lignes
matrice_1 <- matrix(test, nrow = 3, ncol = 3, byrow = F)
matrice_1
matrice_1 <- matrix(test, nrow = 5, ncol = 3, byrow = F)
matrice_1
#La matrice est remplie par des lignes
matrice_2 <- matrix(test, nrow = 5, ncol = 3, byrow = T)
matrice_2
# Première ligne première colonne
matrice_1[1,1]
# Deuxième ligne troisième colonne
matrice_1[2,3]
# Accéder à la ligne
matrice_1[1,]
# Accéder à la troisième colonne
matrice_1[,3]
# Modifier la première ligne
matrice_1[1,] <- c(20,30,40)
matrice_1
# Modifier la première colonne de la matrice
matrice_1[,1] <- c(20,30,40)
# Modifier la première colonne de la matrice
matrice_1[,1] <- c(21,45,200,0,35)
matrice_1
# Deux
matrice_1[1:2,1:2]
##### Exercice 14 : Dataframes
# Créez un dataframe appelé
df <- data.frame(
Noms=c("Git", "Giz", "Gis", "Gibs", "Gely"),
Age = c(42, 38, 34, 32, 25)
)
df
library(readxl)     # Bibliothèque de manipulation de données dans Excel
library(dplyr)      # Bibliothèque de manipulation de données statistiques
library(psych)     # Bibliothèque de statistiques descriptives
library(ggplot2)    # Visualisation des données
library(psych)     # Bibliothèque de statistiques descriptives
options(digits = 3) # Combien de décimales afficher
setwd("E:\WORLD\PERSO\Фин. Уни\Группы МЕН - ЦГиЭ - ИБ - ИД\!!МОИ\!Темы\Тема 1 - Данные в экономике и их визуализация") # Changer son répertoire de travail
setwd("E:\\WORLD\\PERSO\\Programmation\\GitHub\\DataScience_R\\Pratique_2") # Changer son répertoire de travail
getwd()  # Identifier son répertoire de travail
# Importaion du fichier client (csv)
dataC = read.table(file.choose(), header = T)
# Importaion du fichier client (csv)
dataC = read.table(file.choose(), sep=";", header = T)
View(dataC)
# Importaion du fichier client (xlsx)
dataCC = read.table(file.choose(), sep=";", header = T)
# Importaion du fichier client (xlsx)
dataCC = read_excel(file.choose(), sep=";", header = T)
# Importaion du fichier client (xlsx)
dataCC = read_excel(file.choose())
View(dataCC)
############
# Imporation de la base vente (csv)
dataV = read.table(file.choose(), sep=";", header = T)
View(dataV)
# Importaion du fichier vente (xlsx)
dataVV = read.table(file.choose())
View(dataVV)
# Importaion du fichier vente (xlsx)
dataVV = read.table(file.choose(), sheet=1, col_names = TRUE)
# Importaion du fichier vente (xlsx)
dataVV = read_excel(file.choose(), sheet=1, col_names = TRUE)
View(dataVV)
# Importaion du fichier vente (xlsx)
dataVV = read_excel(file.choose(), sheet=1, dec = ".", col_names = TRUE)
glimpse(dataC)    # Смотрим что получилось в data
str(dataC)    # Смотрим что получилось в data
views(dataC)
view(dataC)
View(dataC)
############
# Importaion du fichier client (csv)
Clients = read.table(file.choose(), sep=";", header = T)
# Importaion du fichier client (xlsx)
Clients1 = read_excel(file.choose())
############
# Imporation de la base vente (csv)
Ventes = read.table(file.choose(), sep=";", header = T)
# Importaion du fichier vente (xlsx)
Ventes1 = read_excel(file.choose(), sheet=1, col_names = TRUE)
glimpse(Clients)    # Voir la structure des donnees
str(Clients)        # voir la structure des donnees
# 5 premiers clients de la table
head(Clients, 5)
# 5 derniers clients de la table
tail(Clients, 5)
# Nombre de ligne
nrow(Clients)
nrow(Ventes)
# nombre de colonne
ncol(Clients)
ncol(Ventes)
dim(Clients)
dim(Ventes)
View(Clients)
# nom des colonnes
nom_colonne_Client <- colnames(Clients)
nom_colonne_Client
nom_colonne_Vente <- colnames(Ventes)
nom_colonne_Vente
sapply(Clients, class)
# Voir les types de donnees de "Ventes"
sapply(Ventes, class)
# Description rapide de la base de donnée
summary(Ventes)
summary(Clients)
Clients$AgeGroup <- as.factor(Clients$AgeGroup)
View(Clients)
View(Clients1)
View(Clients)
View(Clients1)
# Description rapide de la base de donnée
summary(Ventes)
Clients$AgeGroup
Clients$EducationLevel <- as.factor(Clients$EducationLevel)
Clients$EducationLevel
glimpse(Clients)    # Voir la structure de la base de données (format plus allonge)
# Les groupes de la base de données
unique(Clients$AgeGroup)
unique(Clients$EducationLevel)
unique(Clients$CustomerCategory)
# Nombre d'individu par groupe
categorie_stat <- table(clients$AgeGroup)
# Nombre d'individu par groupe
categorie_stat <- table(Clients$AgeGroup)
categorie_stat
prop.table(categorie_stat)
# Nombre d'individu par groupe
categorie_stat <- table(Clients$EducationLevel)
categorie_stat
prop.table(categorie_stat)
# Nombre d'individu par groupe
categorie_stat <- table(Clients$CustomerCategory)
prop.table(categorie_stat)
summary()
# Nombre de valeur manquante sur le groupe d'âge
sum(is.na(Clients$AgeGroup))
# Nombre de valeur manquante sur le groupe d'âge
sum(is.na(Clients$EducationLevel))
# Structrure de la base de données
str(Ventes)
# Nombre de valeur manquante sur le prix
sum(is.na(Ventes$Quantity))
# Nombre de valeur manquante sur le prix
sum(is.na(Ventes$Price))
# Nombre de valeur manquante sur le prix
sum(is.na(Ventes$Price))
# Nombre de valeur manquante sur le groupe d'âge
sum(is.na(Ventes$Price))
summary(Ventes)
# Nombre de valeur manquante sur la base de donnée
colSums(is.na(Ventes))
# Remplacer la valeur manquante sur le prix par la valeur zero
venteb <- Ventes
venteb$Price[is.na(venteb$Price)] <- 0
colSums(is.na(venteb))
# Supprimer les valeurs manquantes
ventec <- na.omit(Ventes)
dim(ventec)
colSums(is.na(ventec))
View(Clients)
# Renommer la colonne name en nom
rename(Clients, "Nom" = "Name")
View(Clients)
# Renommer la colonne name en nom
rename(Clients, "Nom" = "Name")
View(Clients)
View(Clients)
colnames(clients)[2] <- "Nombis"
colnames(Clients)[2] <- "Nombis"
View(Clients)
# Renommer la colonne name en nom
rename(Clients, "Nom" = "Name")
# Renommer la colonne name en nom
rename(Clients, "Nom" = "Nombis")
View(Clients)
# Renommer la colonne name en nom
rename(Clients, "name" = "Nombis")
View(Clients)
colnames(Clients)[2] <- "name"
View(Clients)
View(vente)
View(Ventes)
# Créer la colonne montantTotal
Ventes$MontantTotal <- Ventes$Quantity * Ventes$Price
View(Ventes)
# CA total
sum(Ventes$MontantTotal, na.rm = T)
View(Ventes)
# Liste des produits dont le prix est supérieur à 40
liste_produit <- Ventes[Ventes$Price > 40, ]
View(Ventes)
liste_produit
liste_produit <- Ventes[Ventes$Price > 40, c("CustomerID", "ProductID")]
View(clients)
liste_produit
View(clients)
View(Clients)
# Donner la liste des Clients premium
liste_premium <- Clients[Clients$CustomerCategory == "Premium", ]
liste_premium
liste_client_premium <- Clients %>%
filter(CustomerCategory == "Premium")
liste_client_premium <- filter(Clients, CustomerCategory == "Premium")
# Joindre les deux tables
jointure <- left_join(Ventes, Clients, by = "CustomerID")
View(jointure)
jointure1 <- inner_join(Ventes, Clients, by = "CustomerID")
View(jointure1)
jointure2 <- merge(Ventes, Clients, by ="CustomerID")
View(jointure2)
View(jointure2)
colnames(Clients)
# Somme de CA par type client
summarise(group_by(jointure,CustomerCategory), nb =n())
jointure %>%
group_by(CustomerCategory) %>%
summarise(somme = sum(MontantTotal, na.rm = T), moyenne = mean(MontantTotal, na.rm = T), nombre = n())
# Liste des produits dont le prix est supérieur à 40 sans les valeurs manquantes
liste_produit <- Ventes[(Ventes$Price > 40) & is.na(Ventes$Price) == FALSE, ]
View(liste_produit)
getwd()  # Identifier son répertoire de travail
library(ggplot2)    # Visualisation des données
library(readxl)     # Bibliothèque de manipulation de données dans Excel
library(dplyr)      # Bibliothèque de manipulation de données statistiques
library(psych)     # Bibliothèque de statistiques descriptives
options(digits = 3) # Combien de décimales afficher
############
# Importaion du fichier client (csv)
Clients = read.table(file.choose(), sep=";", header = T)
# Importaion du fichier client (xlsx)
Clients1 = read_excel(file.choose())
############
# Imporation de la base Ventes (csv)
Ventes = read.table(file.choose(), sep=";", header = T)
# Importaion du fichier Ventes (xlsx)
Ventes1 = read_excel(file.choose(), sheet=1, col_names = TRUE)
glimpse(Clients)    # Voir la structure de la base de données (format plus allonge)
str(Clients)        # voir la structure de la base de données
View(Clients)       # Visionner les donnees
# Voir les types de donnees de "Ventes"
sapply(Ventes, class)
# Voir les types de donnees de "Ventes"
sapply(Ventes, class)
# Voir les types de donnees de "Clients"
sapply(Clients, class)
# Nombre de ligne
nrow(Clients)
nrow(Ventes)
# dimension de la base des donnees
dim(Clients)
# nom des colonnes
nom_colonne_Client <- colnames(Clients)
View(Clients)
nom_colonne_Vente <- colnames(Ventes)
# Description rapide de la base de donnée
summary(Ventes)
# Les groupes de la base de données
unique(Clients$AgeGroup)
unique(Clients$CustomerCategory)
# Nombre d'individu par groupe
categorie_stat <- table(Clients$CustomerCategory)
categorie_stat
prop.table(categorie_stat)
# Nombre de valeur manquante sur le prix
sum(is.na(Ventes$Price))
# Nombre de valeur manquante sur la base de donnée
colSums(is.na(Ventes))
# Remplacer la valeur manquante sur le prix par la valeur zero
venteb <- Ventes
venteb$Price[is.na(venteb$Price)] <- 0
colSums(is.na(venteb))
# Supprimer les valeurs manquantes
ventec <- na.omit(Ventes)
dim(ventec)
colSums(is.na(ventec))
View(Clients)
# Renommer la colonne name en nom
rename(Clients, "nom" = "name") # Cette fonction ne change pas le nom de la colonne dans le fichier source
View(Clients1)
# Renommer la colonne name en nom
rename(Clients, "nom" = "name") # Cette fonction ne change pas le nom de la colonne dans le fichier source
# Renommer la colonne name en nom
rename(Clients, "name" = "nom") # Cette fonction ne change pas le nom de la colonne dans le fichier source
View(Clients)
colnames(Clients)[2] <- "nom" # Cette fonction change le nom de la colonne dans le fichier source
View(Clients)
rename(Clients, "name" = "nom")
View(Clients)
View(Ventes)
# Créer la colonne montantTotal
Ventes$MontantTotal <- Ventes$Quantity * Ventes$Price
View(Ventes)
# Somme du montant total
sum(Ventes$MontantTotal, na.rm = T)
View(Ventes)
# Liste des produits dont le prix est supérieur à 40
liste_produit <- Ventes[Ventes$Price > 40, ]
liste_produit <- Ventes[Ventes$Price > 40, c("CustomerID", "ProductID")]
View(Clients)
# Donner la liste des Clients premium
liste_premium <- Clients[Clients$CustomerCategory == "Premium", ]
liste_premium
liste_client_premium <- Clients %>%
filter(CustomerCategory == "Premium")
liste_client_premium
# Joindre les deux tables
jointure <- left_join(Ventes, Clients, by = "CustomerID")
jointure
View(Clients)
View(Ventes)
jointure1 <- inner_join(Ventes, Clients, by = "CustomerID")
jointure1
jointure2 <- merge(Ventes, Clients, by ="CustomerID") ## Faire joindre les 2 tableaux en ordre croissant
jointure2
colnames(Clients)
# Somme de CA par type client
summarise(group_by(jointure,CustomerCategory), nb =n())
jointure %>%
group_by(CustomerCategory) %>%
summarise(somme = sum(MontantTotal, na.rm = T), moyenne = mean(MontantTotal, na.rm = T), nombre = n())
# Liste des produits dont le prix est supérieur à 40 sans les valeurs manquantes
liste_produit <- Ventes[(Ventes$Price > 40) & is.na(Ventes$Price) == FALSE, ]
View(liste_produit)
liste_produit <- Ventes[Ventes$Price > 40, c("CustomerID", "ProductID")]
# Donner la liste des Clients premium
liste_premium <- Clients[Clients$CustomerCategory == "Premium", ]
liste_Clients_premium <- Clients %>%
filter(CustomerCategory == "Premium")
liste_Clients_premium
liste_Clients_premium <- filter(Clients, CustomerCategory == "Premium")
